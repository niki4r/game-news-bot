import feedparser
import openai
import os
from io import BytesIO
import base64
import datetime

openai.api_key = os.getenv("OPENAI_API_KEY")

FEEDS = {
    "https://dtf.ru/rss/games": 12,  # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    "https://www.gamespot.com/feeds/news/": 6,
    "https://feeds.feedburner.com/ign/all": 6,
    "https://www.pushsquare.com/feeds/news": 6,
    "https://www.purexbox.com/feeds/news": 6,
    "https://www.eurogamer.net/rss": 6
}

async def fetch_daily_news():
    print("–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    entries = []
    for feed, count in FEEDS.items():
        d = feedparser.parse(feed)
        entries += d.entries[:count]
    print(f"–°–æ–±—Ä–∞–Ω–æ –≤—Å–µ–≥–æ {len(entries)} –Ω–æ–≤–æ—Å—Ç–µ–π.")

    filtered = []
    for e in entries:
        text = (e.title + " " + e.get("summary", "")).lower()
        if "discount" in text or "—Å–∫–∏–¥–∫–∞" in text or "sale" in text or "% off" in text:
            continue
        filtered.append(e)

    print(f"–û—Å—Ç–∞–≤–ª–µ–Ω–æ {len(filtered)} –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∫–∏–¥–æ–∫.")

    news_with_links = []
    for i, e in enumerate(filtered):
        title = e.title
        summary = e.get("summary", "")[:300].replace("\n", " ")
        link = e.link
        news_with_links.append(f"{i+1}. {title} - {summary}\n–°—Å—ã–ª–∫–∞: {link}")

    bulk_prompt = "\n\n".join(news_with_links)

    system_message = "–¢—ã ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä Telegram-–∫–∞–Ω–∞–ª–∞ –ø–æ –∏–≥—Ä–∞–º –Ω–∞ PlayStation –∏ Xbox."

    user_prompt = f"""–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π:

{bulk_prompt}

–í—ã–±–µ—Ä–∏ 10 —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ PlayStation –∏ Xbox.
–ù–µ –≤–∫–ª—é—á–∞–π Nintendo, PC-only, —Ñ–∏–ª—å–º—ã, —Å–µ—Ä–∏–∞–ª—ã, –º–∞–Ω–≥—É –∏ —Ç.–ø.
–ò–°–ö–õ–Æ–ß–ò –ª—é–±—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ —Å–∫–∏–¥–∫–∞—Ö, —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞—Ö –∏ –∞–∫—Ü–∏—è—Ö.

–î–ª—è –∫–∞–∂–¥–æ–π:
- –ü–µ—Ä–µ–≤–µ–¥–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∏ –≤—ã–¥–µ–ª–∏ –µ–≥–æ –∂–∏—Ä–Ω—ã–º
- –í –Ω–∞—á–∞–ª–µ –ø–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —ç–º–æ–¥–∑–∏: üéÆ (–∏–≥—Ä–∞), üõ† (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ), üî• (—Ä–µ–ª–∏–∑), üí¨ (—Å–ª—É—Ö), üß™ (–±–µ—Ç–∞), üéÇ (–≥–æ–¥–æ–≤—â–∏–Ω–∞) –∏ —Ç.–ø.
- –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ-—Ä—É—Å—Å–∫–∏)
- –í –∫–æ–Ω—Ü–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤—Å—Ç–∞–≤—å <a href="–°–°–´–õ–ö–ê">–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>
- –ù–µ –≤—Å—Ç–∞–≤–ª—è–π —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ https:// ‚Äî —Ç–æ–ª—å–∫–æ –≤ <a href>

–§–æ—Ä–º–∞—Ç:
üéÆ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>
–û–ø–∏—Å–∞–Ω–∏–µ. <a href="–°–°–´–õ–ö–ê">–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>

–ú–∞–∫—Å–∏–º—É–º ‚Äî 3900 —Å–∏–º–≤–æ–ª–æ–≤.
"""

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_message},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.7,
            max_tokens=1500
        )
        formatted_news = response["choices"][0]["message"]["content"].strip()

        if len(formatted_news) > 3900:
            formatted_news = formatted_news[:3900].rsplit("\n", 1)[0] + "\n‚Ä¶"

        print("–°–≤–æ–¥–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞.")

# –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML –≤ —Ç–µ–∫—Å—Ç–µ, –∫—Ä–æ–º–µ —Ç–µ–≥–æ–≤ <b> –∏ <a>
    from html import escape
    import re

    def clean_html(text):
        allowed_tags = re.compile(r'(<\/?b>|<a href="[^"]+">|<\/a>)')
        parts = allowed_tags.split(text)
        result = ""
        for part in parts:
            if allowed_tags.fullmatch(part):
                result += part
            else:
                result += escape(part)
        return result

    formatted_news = clean_html(formatted_news)
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ GPT –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏]: {e}")
        formatted_news = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É."

    today = datetime.datetime.now().strftime("%d.%m.%Y")
    return f"üéÆ <b>–í–µ—á–µ—Ä–Ω—è—è –∏–≥—Ä–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ ‚Äî {today}</b>\n\n" + formatted_news

async def generate_image():
    prompt = "Evening gaming news, PlayStation and Xbox focus, dark neon style, 3D illustration, game icons, controller"
    try:
        response = openai.Image.create(
            prompt=prompt,
            n=1,
            size="1024x1024",
            response_format="b64_json"
        )
        image_data = base64.b64decode(response['data'][0]['b64_json'])
        print("–ö–∞—Ä—Ç–∏–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
        return BytesIO(image_data)
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è]: {e}")
        return None