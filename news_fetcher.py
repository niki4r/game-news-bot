import feedparser
import openai
import os
from io import BytesIO
import base64
import datetime

openai.api_key = os.getenv("OPENAI_API_KEY")

FEEDS = [
    "https://www.gamespot.com/feeds/news/",
    "https://feeds.feedburner.com/ign/all",
    "https://www.pushsquare.com/feeds/news",
    "https://www.purexbox.com/feeds/news",
    "https://www.eurogamer.net/rss",
    "https://dtf.ru/rss/games"
]

async def fetch_daily_news():
    print("–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    entries = []
    for feed in FEEDS:
        d = feedparser.parse(feed)
        entries += d.entries[:6]
    print(f"–°–æ–±—Ä–∞–Ω–æ –≤—Å–µ–≥–æ {len(entries)} –Ω–æ–≤–æ—Å—Ç–µ–π.")

    news_with_links = []
    for i, e in enumerate(entries):
        title = e.title
        summary = e.get("summary", "")[:300].replace("\n", " ")
        link = e.link
        news_with_links.append(f"{i+1}. {title} - {summary}\n–°—Å—ã–ª–∫–∞: {link}")

    bulk_prompt = "\n\n".join(news_with_links)

    system_message = "–¢—ã ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä Telegram-–∫–∞–Ω–∞–ª–∞ –ø–æ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º –∏–≥—Ä–∞–º (PS4, PS5, Xbox)."

    user_prompt = f"""–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π:

{bulk_prompt}

–í—ã–±–µ—Ä–∏ 10 —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ PlayStation –∏ Xbox. –ù–µ –≤–∫–ª—é—á–∞–π Nintendo, PC-only, –º–∞–Ω–≥—É, —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã.

–î–ª—è –∫–∞–∂–¥–æ–π:
- –í—Å—Ç–∞–≤—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ
- –°–¥–µ–ª–∞–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∏—Ä–Ω—ã–º
- –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- –í –ö–û–ù–¶–ï –æ–ø–∏—Å–∞–Ω–∏—è –≤—Å—Ç–∞–≤—å <a href="–°–°–´–õ–ö–ê">–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>
- –°–æ—Ö—Ä–∞–Ω–∏ Telegram-—Ñ–æ—Ä–º–∞—Ç –∏ —É–∫–ª–∞–¥—ã–≤–∞–π—Å—è –≤ 3900 —Å–∏–º–≤–æ–ª–æ–≤

–§–æ—Ä–º–∞—Ç:
üéÆ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>
–û–ø–∏—Å–∞–Ω–∏–µ. <a href="–°–°–´–õ–ö–ê">–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>
"""

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_message},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.7,
            max_tokens=1500
        )
        formatted_news = response["choices"][0]["message"]["content"].strip()

        if len(formatted_news) > 3900:
            formatted_news = formatted_news[:3900].rsplit("\n", 1)[0] + "\n‚Ä¶"

        print("–°–≤–æ–¥–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ GPT –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏]: {e}")
        formatted_news = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É."

    today = datetime.datetime.now().strftime("%d.%m.%Y")
    return f"üéÆ <b>–í–µ—á–µ—Ä–Ω—è—è –∏–≥—Ä–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ ‚Äî {today}</b>\n\n" + formatted_news

async def generate_image():
    prompt = "Evening gaming news, PlayStation and Xbox focus, dramatic neon dark style"
    try:
        response = openai.Image.create(
            prompt=prompt,
            n=1,
            size="1024x1024",
            response_format="b64_json"
        )
        image_data = base64.b64decode(response['data'][0]['b64_json'])
        print("–ö–∞—Ä—Ç–∏–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
        return BytesIO(image_data)
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è]: {e}")
        return None